# -*- coding: utf-8 -*-
"""TDT4173_Project.ipynb

Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1nC9ive9C58w5AVnbOIV1Bo-kM2bmEffP
"""
#%%
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
from google.colab import drive
from tensorflow.keras import datasets, layers, models
from keras.models import load_model
import os
drive.mount('/content/gdrive')

#%%
"""#Load and prepare dataset

The CIFAR10 dataset contains 60 000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images. The classes are mutually exclusive and there is no overlap between them.
"""

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize
train_images, test_images = train_images / 255.0, test_images / 255.0

"""# Convolutional base
The 6 lines of code below define the convolutional base using a common pattern: a stack of Conv2D and MaxPooling2D layers.

As input, a CNN takes tensors of shape (image_height, image_width, color_channels), ignoring the batch size. If you are new to these dimensions, color_channels refers to (R,G,B). In this example, you will configure our CNN to process inputs of shape (32, 32, 3), which is the format of CIFAR images. You can do this by passing the argument input_shape to our first layer.
"""

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

"""To complete our model, you will feed the last output tensor from the convolutional base (of shape (4, 4, 64)) into one or more Dense layers to perform classification. Dense layers take vectors as input (which are 1D), while the current output is a 3D tensor. First, you will flatten (or unroll) the 3D output to 1D, then add one or more Dense layers on top. CIFAR has 10 output classes, so you use a final Dense layer with 10 outputs and a softmax activation."""

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

# Display architecture
model.summary()
#%%
"""## Networks for ensamble method

Make a funtion that returns the model to be trained. Example below:
"""

def conv_pool_cnn(model_input: Tensor) -> training.Model:
    
    x = Conv2D(96, kernel_size=(3, 3), activation='relu', padding = 'same')(model_input)
    x = Conv2D(96, (3, 3), activation='relu', padding = 'same')(x)
    x = Conv2D(96, (3, 3), activation='relu', padding = 'same')(x)
    x = MaxPooling2D(pool_size=(3, 3), strides = 2)(x)
    x = Conv2D(192, (3, 3), activation='relu', padding = 'same')(x)
    x = Conv2D(192, (3, 3), activation='relu', padding = 'same')(x)
    x = Conv2D(192, (3, 3), activation='relu', padding = 'same')(x)
    x = MaxPooling2D(pool_size=(3, 3), strides = 2)(x)
    x = Conv2D(192, (3, 3), activation='relu', padding = 'same')(x)
    x = Conv2D(192, (1, 1), activation='relu')(x)
    x = Conv2D(10, (1, 1))(x)
    x = GlobalAveragePooling2D()(x)
    x = Activation(activation='softmax')(x)
    
    model = Model(model_input, x, name='conv_pool_cnn')
    
    return model
#%%
"""# Training"""

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10, 
                    validation_data=(test_images, test_labels))
filepath="/content/gdrive/My Drive/model/weights-{epoch:02d}-{val_acc:.3f}.hdf5"
model.save(filepath)



#classifier = load_model("/content/gdrive/My Drive/model/weights-15-0.815.hdf5")

#classifier.fit(X_train, Y_train, batch_size=100, epochs=20,
 #                          validation_data=(X_validation, Y_validation),
  #                        callbacks=callbacks_list,
   #                       initial_epoch = 15)

#%%
"""# Voting-based Ensamble method

When making the voting based ensamble method we will initialize each classifier using the weights achieved in the training process, and then combining them using a weighted average.
"""

import os
from keras.engine import training
from tensorflow.keras.models import Input
CONVNET_1_WEIGHTS_FILE = os.path.join(os.getcwd(),"weight", file1)
CONVNET_2_WEIGHTS_FILE = os.path.join(os.getcwd(),"weight", file2)
CONVNET_3_WEIGHTS_FILE = os.path.join(os.getcwd(),"weight", file3)
CONVNET_4_WEIGHTS_FILE = os.path.join(os.getcwd(),"weight", file4)

def ensemble_method(models: List[training.Model], input: Tensor)->training.Model:
  outputs = [model.outputs[0] for model in models]
  y = #Make weighted avg func
  model = Model(model_input, y, name='ensemble')

"""# Plotting and analysis"""

